// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package vsyntax_test

import (
	"github.com/nelsam/vidar/commander/text"
)

type mockEditor struct {
	FilepathCalled chan bool
	FilepathOutput struct {
		Ret0 chan string
	}
	TextCalled chan bool
	TextOutput struct {
		Ret0 chan string
	}
	RunesCalled chan bool
	RunesOutput struct {
		Ret0 chan []rune
	}
	SetTextCalled chan bool
	SetTextInput  struct {
		Arg0 chan string
	}
	SyntaxLayersCalled chan bool
	SyntaxLayersOutput struct {
		Ret0 chan []text.SyntaxLayer
	}
	SetSyntaxLayersCalled chan bool
	SetSyntaxLayersInput  struct {
		Arg0 chan []text.SyntaxLayer
	}
}

func newMockEditor() *mockEditor {
	m := &mockEditor{}
	m.FilepathCalled = make(chan bool, 100)
	m.FilepathOutput.Ret0 = make(chan string, 100)
	m.TextCalled = make(chan bool, 100)
	m.TextOutput.Ret0 = make(chan string, 100)
	m.RunesCalled = make(chan bool, 100)
	m.RunesOutput.Ret0 = make(chan []rune, 100)
	m.SetTextCalled = make(chan bool, 100)
	m.SetTextInput.Arg0 = make(chan string, 100)
	m.SyntaxLayersCalled = make(chan bool, 100)
	m.SyntaxLayersOutput.Ret0 = make(chan []text.SyntaxLayer, 100)
	m.SetSyntaxLayersCalled = make(chan bool, 100)
	m.SetSyntaxLayersInput.Arg0 = make(chan []text.SyntaxLayer, 100)
	return m
}
func (m *mockEditor) Filepath() string {
	m.FilepathCalled <- true
	return <-m.FilepathOutput.Ret0
}
func (m *mockEditor) Text() string {
	m.TextCalled <- true
	return <-m.TextOutput.Ret0
}
func (m *mockEditor) Runes() []rune {
	m.RunesCalled <- true
	return <-m.RunesOutput.Ret0
}
func (m *mockEditor) SetText(arg0 string) {
	m.SetTextCalled <- true
	m.SetTextInput.Arg0 <- arg0
}
func (m *mockEditor) SyntaxLayers() []text.SyntaxLayer {
	m.SyntaxLayersCalled <- true
	return <-m.SyntaxLayersOutput.Ret0
}
func (m *mockEditor) SetSyntaxLayers(arg0 []text.SyntaxLayer) {
	m.SetSyntaxLayersCalled <- true
	m.SetSyntaxLayersInput.Arg0 <- arg0
}
